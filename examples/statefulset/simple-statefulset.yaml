# - StatefulSets currently require a Headless Service to be responsible for the network identity of the Pods.
# You are responsible for creating this Service.
# - StatefulSets do not provide any guarantees on the termination of pods when a StatefulSet is deleted.
# To achieve ordered and graceful termination of the pods in the StatefulSet, it is possible to scale the
# StatefulSet down to 0 prior to deletion.
--- # Grants the provisioning of a Headless Service
apiVersion: v1
kind: Service
metadata:
  name: example-headless-service
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    # This must match the .spec.template.metadata.labels of Statefulset.
    # This means that the IPs will be created based on PODs directelly, it won't be managed by
    # the StatefulSet Controler, it bypass it
    app: nginx 
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: nginx # has to match .spec.template.metadata.labels
  serviceName: "nginx"
  replicas: 3 # by default is 1
  template:
    metadata:
      labels:
        app: nginx # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: nginx
        image: k8s.gcr.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  # On a provider this automatically provisions a persistent volume.
  # Note that for each replica a new PV will be created, s√≥ take care when over estimating a disk size.
  # All PVs are not shared.
  volumeClaimTemplates: 
  - metadata:
      name: www
    spec:
      accessModes: 
      - "ReadWriteOnce"
      resources:
        requests:
          storage: 1Gi